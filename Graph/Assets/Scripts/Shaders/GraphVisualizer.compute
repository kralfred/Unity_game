#pragma kernel FunctionKernel
#pragma kernel MorphKernel


#define PI 3.14159265358979323846

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "FunctionLibrary.hlsl"

 RWStructuredBuffer<float3> _Positions;

int _FunctionFrom; 

uint _Resolution, _functionIndex;
string _CurrentFunc , _NextFunc;

float _Step, _Time, _TransitionProgress;

float2 GetUV (uint3 id) {
	return (id.xy + 0.5) * _Step - 1.0;
}
void SetPosition (uint3 id, float3 position) {
	if (id.x < _Resolution && id.y < _Resolution) {
		_Positions[id.x + id.y * _Resolution] = position;
	}
}


#define CALL_FUNCTION(id, u, v) \
    (id == 0) ? Wave(u, v) : \
    (id == 1) ? MultiWave(u, v) : \
    (id == 2) ? Ripple(u, v) : \
    (id == 3) ? Sphere(u, v) : \
	Torus(u, v)

[numthreads(8, 8, 1)]
void MorphKernel (uint3 id: SV_DispatchThreadID) {
	float2 uv = GetUV(id);

	 float3 fromPos = CALL_FUNCTION(_FunctionFrom, uv.x, uv.y);
    float3 toPos = CALL_FUNCTION(_functionIndex, uv.x, uv.y);
    float3 finalPos = lerp(fromPos, toPos, _TransitionProgress);
    
    SetPosition(id, finalPos);

}

[numthreads(8, 8, 1)]
void FunctionKernel (uint3 id: SV_DispatchThreadID) {
	float2 uv = GetUV(id);

	SetPosition(id, CALL_FUNCTION(_functionIndex, uv.x, uv.y));

}









